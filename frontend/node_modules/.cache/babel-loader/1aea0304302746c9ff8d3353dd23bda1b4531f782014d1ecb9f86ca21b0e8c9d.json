{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Article API\nexport const articleApi = {\n  getAll: () => {\n    try {\n      // If you don't have a backend running yet, use the context instead\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      console.log(\"Retrieved articles:\", articles.length);\n      return {\n        data: articles\n      };\n      // When backend is ready, uncomment this:\n      // return axios.get(`${API_URL}/articles`);\n    } catch (error) {\n      console.error(\"Error in articleApi.getAll:\", error);\n      return {\n        data: []\n      };\n    }\n  },\n  getById: id => {\n    try {\n      // Temporary solution using localStorage\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const article = articles.find(a => a.id === parseInt(id));\n      if (!article) {\n        console.warn(`Article with id ${id} not found`);\n      }\n      return {\n        data: article\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/articles/${id}`);\n    } catch (error) {\n      console.error(`Error in articleApi.getById(${id}):`, error);\n      return {\n        data: null\n      };\n    }\n  },\n  getRelated: id => {\n    try {\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      // Filter approved articles only\n      const approvedArticles = articles.filter(a => a.status === 'approved');\n      // Get related articles (different from current, limit to 3)\n      const relatedArticles = approvedArticles.filter(a => a.id !== parseInt(id)).slice(0, 3);\n      return {\n        data: relatedArticles\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/articles/${id}/related`);\n    } catch (error) {\n      console.error(`Error in articleApi.getRelated(${id}):`, error);\n      return {\n        data: []\n      };\n    }\n  },\n  create: data => {\n    try {\n      console.log(\"Creating article with data:\", data);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n\n      // Create a new article with a unique ID\n      const newId = articles.length > 0 ? Math.max(...articles.map(a => typeof a.id === 'number' ? a.id : 0)) + 1 : 1;\n\n      // Process image path if it's a relative path\n      let imagePath = data.image;\n      if (!imagePath.startsWith('http')) {\n        // Ensure path starts with /\n        if (!imagePath.startsWith('/')) {\n          imagePath = '/' + imagePath;\n        }\n      }\n      const newArticle = {\n        ...data,\n        id: newId,\n        image: imagePath,\n        date: data.date || new Date().toISOString(),\n        averageRating: 0,\n        totalRatings: 0,\n        commentCount: 0\n      };\n      articles.push(newArticle);\n      localStorage.setItem('articles', JSON.stringify(articles));\n      console.log(\"Article created successfully:\", newArticle);\n\n      // Initialize empty comments array for this article\n      const comments = JSON.parse(localStorage.getItem('comments')) || {};\n      comments[newId] = [];\n      localStorage.setItem('comments', JSON.stringify(comments));\n      return {\n        data: newArticle\n      };\n      // When backend is ready:\n      // return axios.post(`${API_URL}/articles`, data);\n    } catch (error) {\n      console.error(\"Error in articleApi.create:\", error);\n      throw error; // Re-throw to allow proper error handling in the component\n    }\n  },\n  update: (id, data) => {\n    try {\n      console.log(`Updating article ${id} with data:`, data);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const index = articles.findIndex(a => a.id === parseInt(id));\n      if (index !== -1) {\n        // Process image path if it's a relative path\n        let imagePath = data.image;\n        if (!imagePath.startsWith('http')) {\n          // Ensure path starts with /\n          if (!imagePath.startsWith('/')) {\n            imagePath = '/' + imagePath;\n          }\n        }\n\n        // Update the article, preserving the id\n        articles[index] = {\n          ...articles[index],\n          ...data,\n          id: parseInt(id),\n          image: imagePath\n        };\n        localStorage.setItem('articles', JSON.stringify(articles));\n        console.log(\"Article updated successfully:\", articles[index]);\n        return {\n          data: articles[index]\n        };\n      } else {\n        console.error(`Article with id ${id} not found for update`);\n        throw new Error(`Article with id ${id} not found`);\n      }\n      // When backend is ready:\n      // return axios.put(`${API_URL}/articles/${id}`, data);\n    } catch (error) {\n      console.error(`Error in articleApi.update(${id}):`, error);\n      throw error;\n    }\n  },\n  delete: id => {\n    try {\n      console.log(`Deleting article ${id}`);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const filteredArticles = articles.filter(a => a.id !== parseInt(id));\n      if (filteredArticles.length === articles.length) {\n        console.warn(`Article with id ${id} not found for deletion`);\n      } else {\n        localStorage.setItem('articles', JSON.stringify(filteredArticles));\n\n        // Delete related comments\n        const comments = JSON.parse(localStorage.getItem('comments')) || {};\n        delete comments[id];\n        localStorage.setItem('comments', JSON.stringify(comments));\n        console.log(`Article ${id} and its comments deleted successfully`);\n      }\n      return {\n        data: {}\n      };\n      // When backend is ready:\n      // return axios.delete(`${API_URL}/articles/${id}`);\n    } catch (error) {\n      console.error(`Error in articleApi.delete(${id}):`, error);\n      throw error;\n    }\n  },\n  addRating: (id, data) => {\n    try {\n      console.log(`Adding rating to article ${id}:`, data);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const article = articles.find(a => a.id === parseInt(id));\n      if (article) {\n        const totalRatings = (article.totalRatings || 0) + 1;\n        const totalScore = (article.averageRating || 0) * (article.totalRatings || 0) + data.rating;\n        const newAverageRating = totalScore / totalRatings;\n        article.averageRating = newAverageRating;\n        article.totalRatings = totalRatings;\n        localStorage.setItem('articles', JSON.stringify(articles));\n        console.log(`Rating added to article ${id}, new average: ${newAverageRating}`);\n        return {\n          data: {\n            averageRating: newAverageRating,\n            totalRatings\n          }\n        };\n      } else {\n        console.error(`Article with id ${id} not found for rating`);\n        throw new Error(`Article with id ${id} not found`);\n      }\n      // When backend is ready:\n      // return axios.post(`${API_URL}/articles/${id}/ratings`, data);\n    } catch (error) {\n      console.error(`Error in articleApi.addRating(${id}):`, error);\n      throw error;\n    }\n  },\n  // Lấy bài viết theo tác giả\n  getByAuthor: author => {\n    try {\n      console.log(`Getting articles by author: ${author}`);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const authorArticles = articles.filter(article => article.author === author);\n      console.log(`Found ${authorArticles.length} articles by ${author}`);\n      return {\n        data: authorArticles\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/articles/author/${author}`);\n    } catch (error) {\n      console.error(`Error in articleApi.getByAuthor(${author}):`, error);\n      return {\n        data: []\n      };\n    }\n  },\n  // Phê duyệt bài viết\n  approveArticle: id => {\n    try {\n      console.log(`Approving article ${id}`);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const index = articles.findIndex(a => a.id === parseInt(id));\n      if (index !== -1) {\n        articles[index].status = 'approved';\n        localStorage.setItem('articles', JSON.stringify(articles));\n        console.log(`Article ${id} approved successfully`);\n        return {\n          data: articles[index]\n        };\n      } else {\n        console.error(`Article with id ${id} not found for approval`);\n        throw new Error(`Article with id ${id} not found`);\n      }\n      // When backend is ready:\n      // return axios.put(`${API_URL}/articles/${id}/approve`);\n    } catch (error) {\n      console.error(`Error in articleApi.approveArticle(${id}):`, error);\n      throw error;\n    }\n  },\n  // Từ chối bài viết\n  rejectArticle: id => {\n    try {\n      console.log(`Rejecting article ${id}`);\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const index = articles.findIndex(a => a.id === parseInt(id));\n      if (index !== -1) {\n        articles[index].status = 'rejected';\n        localStorage.setItem('articles', JSON.stringify(articles));\n        console.log(`Article ${id} rejected successfully`);\n        return {\n          data: articles[index]\n        };\n      } else {\n        console.error(`Article with id ${id} not found for rejection`);\n        throw new Error(`Article with id ${id} not found`);\n      }\n      // When backend is ready:\n      // return axios.put(`${API_URL}/articles/${id}/reject`);\n    } catch (error) {\n      console.error(`Error in articleApi.rejectArticle(${id}):`, error);\n      throw error;\n    }\n  },\n  // Lấy các bài viết đang chờ phê duyệt\n  getPendingArticles: () => {\n    try {\n      console.log(\"Getting pending articles\");\n\n      // Temporary solution\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const pendingArticles = articles.filter(a => a.status === 'pending' || !a.status);\n      console.log(`Found ${pendingArticles.length} pending articles`);\n      return {\n        data: pendingArticles\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/articles/pending`);\n    } catch (error) {\n      console.error(\"Error in articleApi.getPendingArticles:\", error);\n      return {\n        data: []\n      };\n    }\n  }\n};\n\n// Comment API\nexport const commentApi = {\n  getAll: () => {\n    try {\n      console.log(\"Getting all comments\");\n\n      // Temporary solution\n      const comments = [];\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\n      Object.keys(commentsObj).forEach(articleId => {\n        const article = articles.find(a => a.id === parseInt(articleId));\n        if (article) {\n          commentsObj[articleId].forEach(comment => {\n            comments.push({\n              ...comment,\n              articleTitle: article.title,\n              article_id: parseInt(articleId)\n            });\n          });\n        }\n      });\n      console.log(`Found ${comments.length} total comments`);\n      return {\n        data: comments\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/comments`);\n    } catch (error) {\n      console.error(\"Error in commentApi.getAll:\", error);\n      return {\n        data: []\n      };\n    }\n  },\n  getByArticleId: articleId => {\n    try {\n      console.log(`Getting comments for article ${articleId}`);\n\n      // Temporary solution\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\n      const articleComments = commentsObj[articleId] || [];\n      console.log(`Found ${articleComments.length} comments for article ${articleId}`);\n      return {\n        data: articleComments\n      };\n      // When backend is ready:\n      // return axios.get(`${API_URL}/comments/${articleId}`);\n    } catch (error) {\n      console.error(`Error in commentApi.getByArticleId(${articleId}):`, error);\n      return {\n        data: []\n      };\n    }\n  },\n  add: (articleId, data) => {\n    try {\n      console.log(`Adding comment to article ${articleId}:`, data);\n\n      // Temporary solution\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\n      const newComment = {\n        id: Date.now(),\n        ...data,\n        date: new Date().toISOString()\n      };\n      if (!commentsObj[articleId]) {\n        commentsObj[articleId] = [];\n      }\n      commentsObj[articleId].unshift(newComment);\n      localStorage.setItem('comments', JSON.stringify(commentsObj));\n\n      // Update article comment count\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\n      const articleIndex = articles.findIndex(a => a.id === parseInt(articleId));\n      if (articleIndex !== -1) {\n        articles[articleIndex].commentCount = (articles[articleIndex].commentCount || 0) + 1;\n        localStorage.setItem('articles', JSON.stringify(articles));\n      }\n      console.log(`Comment added to article ${articleId} successfully`);\n      return {\n        data: newComment\n      };\n      // When backend is ready:\n      // return axios.post(`${API_URL}/comments/${articleId}`, data);\n    } catch (error) {\n      console.error(`Error in commentApi.add(${articleId}):`, error);\n      throw error;\n    }\n  },\n  delete: id => {\n    try {\n      console.log(`Deleting comment ${id}`);\n\n      // Temporary solution\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\n      let deleted = false;\n      let articleId = null;\n      Object.keys(commentsObj).forEach(artId => {\n        const index = commentsObj[artId].findIndex(c => c.id === parseInt(id));\n        if (index !== -1) {\n          commentsObj[artId].splice(index, 1);\n          deleted = true;\n          articleId = artId;\n        }\n      });\n      if (deleted) {\n        localStorage.setItem('comments', JSON.stringify(commentsObj));\n\n        // Update article comment count\n        if (articleId) {\n          const articles = JSON.parse(localStorage.getItem('articles')) || [];\n          const articleIndex = articles.findIndex(a => a.id === parseInt(articleId));\n          if (articleIndex !== -1) {\n            articles[articleIndex].commentCount = Math.max((articles[articleIndex].commentCount || 0) - 1, 0);\n            localStorage.setItem('articles', JSON.stringify(articles));\n          }\n        }\n        console.log(`Comment ${id} deleted successfully`);\n      } else {\n        console.warn(`Comment with id ${id} not found for deletion`);\n      }\n      return {\n        data: {}\n      };\n      // When backend is ready:\n      // return axios.delete(`${API_URL}/comments/${id}`);\n    } catch (error) {\n      console.error(`Error in commentApi.delete(${id}):`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","articleApi","getAll","articles","JSON","parse","localStorage","getItem","console","log","length","data","error","getById","id","article","find","a","parseInt","warn","getRelated","approvedArticles","filter","status","relatedArticles","slice","create","newId","Math","max","map","imagePath","image","startsWith","newArticle","date","Date","toISOString","averageRating","totalRatings","commentCount","push","setItem","stringify","comments","update","index","findIndex","Error","delete","filteredArticles","addRating","totalScore","rating","newAverageRating","getByAuthor","author","authorArticles","approveArticle","rejectArticle","getPendingArticles","pendingArticles","commentApi","commentsObj","Object","keys","forEach","articleId","comment","articleTitle","title","article_id","getByArticleId","articleComments","add","newComment","now","unshift","articleIndex","deleted","artId","c","splice"],"sources":["D:/UDW/my-am-app/frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Article API\r\nexport const articleApi = {\r\n  getAll: () => {\r\n    try {\r\n      // If you don't have a backend running yet, use the context instead\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      console.log(\"Retrieved articles:\", articles.length);\r\n      return { data: articles };\r\n      // When backend is ready, uncomment this:\r\n      // return axios.get(`${API_URL}/articles`);\r\n    } catch (error) {\r\n      console.error(\"Error in articleApi.getAll:\", error);\r\n      return { data: [] };\r\n    }\r\n  },\r\n  \r\n  getById: (id) => {\r\n    try {\r\n      // Temporary solution using localStorage\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const article = articles.find(a => a.id === parseInt(id));\r\n      if (!article) {\r\n        console.warn(`Article with id ${id} not found`);\r\n      }\r\n      return { data: article };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/articles/${id}`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.getById(${id}):`, error);\r\n      return { data: null };\r\n    }\r\n  },\r\n  \r\n  getRelated: (id) => {\r\n    try {\r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      // Filter approved articles only\r\n      const approvedArticles = articles.filter(a => a.status === 'approved');\r\n      // Get related articles (different from current, limit to 3)\r\n      const relatedArticles = approvedArticles\r\n        .filter(a => a.id !== parseInt(id))\r\n        .slice(0, 3);\r\n      return { data: relatedArticles };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/articles/${id}/related`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.getRelated(${id}):`, error);\r\n      return { data: [] };\r\n    }\r\n  },\r\n  \r\n  create: (data) => {\r\n    try {\r\n      console.log(\"Creating article with data:\", data);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      \r\n      // Create a new article with a unique ID\r\n      const newId = articles.length > 0 \r\n        ? Math.max(...articles.map(a => typeof a.id === 'number' ? a.id : 0)) + 1 \r\n        : 1;\r\n      \r\n      // Process image path if it's a relative path\r\n      let imagePath = data.image;\r\n      if (!imagePath.startsWith('http')) {\r\n        // Ensure path starts with /\r\n        if (!imagePath.startsWith('/')) {\r\n          imagePath = '/' + imagePath;\r\n        }\r\n      }\r\n      \r\n      const newArticle = {\r\n        ...data,\r\n        id: newId,\r\n        image: imagePath,\r\n        date: data.date || new Date().toISOString(),\r\n        averageRating: 0,\r\n        totalRatings: 0,\r\n        commentCount: 0\r\n      };\r\n      \r\n      articles.push(newArticle);\r\n      localStorage.setItem('articles', JSON.stringify(articles));\r\n      \r\n      console.log(\"Article created successfully:\", newArticle);\r\n      \r\n      // Initialize empty comments array for this article\r\n      const comments = JSON.parse(localStorage.getItem('comments')) || {};\r\n      comments[newId] = [];\r\n      localStorage.setItem('comments', JSON.stringify(comments));\r\n      \r\n      return { data: newArticle };\r\n      // When backend is ready:\r\n      // return axios.post(`${API_URL}/articles`, data);\r\n    } catch (error) {\r\n      console.error(\"Error in articleApi.create:\", error);\r\n      throw error; // Re-throw to allow proper error handling in the component\r\n    }\r\n  },\r\n  \r\n  update: (id, data) => {\r\n    try {\r\n      console.log(`Updating article ${id} with data:`, data);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const index = articles.findIndex(a => a.id === parseInt(id));\r\n      \r\n      if (index !== -1) {\r\n        // Process image path if it's a relative path\r\n        let imagePath = data.image;\r\n        if (!imagePath.startsWith('http')) {\r\n          // Ensure path starts with /\r\n          if (!imagePath.startsWith('/')) {\r\n            imagePath = '/' + imagePath;\r\n          }\r\n        }\r\n        \r\n        // Update the article, preserving the id\r\n        articles[index] = { \r\n          ...articles[index], \r\n          ...data,\r\n          id: parseInt(id),\r\n          image: imagePath\r\n        };\r\n        \r\n        localStorage.setItem('articles', JSON.stringify(articles));\r\n        console.log(\"Article updated successfully:\", articles[index]);\r\n        \r\n        return { data: articles[index] };\r\n      } else {\r\n        console.error(`Article with id ${id} not found for update`);\r\n        throw new Error(`Article with id ${id} not found`);\r\n      }\r\n      // When backend is ready:\r\n      // return axios.put(`${API_URL}/articles/${id}`, data);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.update(${id}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  delete: (id) => {\r\n    try {\r\n      console.log(`Deleting article ${id}`);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const filteredArticles = articles.filter(a => a.id !== parseInt(id));\r\n      \r\n      if (filteredArticles.length === articles.length) {\r\n        console.warn(`Article with id ${id} not found for deletion`);\r\n      } else {\r\n        localStorage.setItem('articles', JSON.stringify(filteredArticles));\r\n        \r\n        // Delete related comments\r\n        const comments = JSON.parse(localStorage.getItem('comments')) || {};\r\n        delete comments[id];\r\n        localStorage.setItem('comments', JSON.stringify(comments));\r\n        \r\n        console.log(`Article ${id} and its comments deleted successfully`);\r\n      }\r\n      \r\n      return { data: {} };\r\n      // When backend is ready:\r\n      // return axios.delete(`${API_URL}/articles/${id}`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.delete(${id}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  addRating: (id, data) => {\r\n    try {\r\n      console.log(`Adding rating to article ${id}:`, data);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const article = articles.find(a => a.id === parseInt(id));\r\n      \r\n      if (article) {\r\n        const totalRatings = (article.totalRatings || 0) + 1;\r\n        const totalScore = (article.averageRating || 0) * (article.totalRatings || 0) + data.rating;\r\n        const newAverageRating = totalScore / totalRatings;\r\n        \r\n        article.averageRating = newAverageRating;\r\n        article.totalRatings = totalRatings;\r\n        \r\n        localStorage.setItem('articles', JSON.stringify(articles));\r\n        console.log(`Rating added to article ${id}, new average: ${newAverageRating}`);\r\n        \r\n        return { \r\n          data: { \r\n            averageRating: newAverageRating, \r\n            totalRatings \r\n          } \r\n        };\r\n      } else {\r\n        console.error(`Article with id ${id} not found for rating`);\r\n        throw new Error(`Article with id ${id} not found`);\r\n      }\r\n      // When backend is ready:\r\n      // return axios.post(`${API_URL}/articles/${id}/ratings`, data);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.addRating(${id}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  // Lấy bài viết theo tác giả\r\n  getByAuthor: (author) => {\r\n    try {\r\n      console.log(`Getting articles by author: ${author}`);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const authorArticles = articles.filter(article => article.author === author);\r\n      \r\n      console.log(`Found ${authorArticles.length} articles by ${author}`);\r\n      return { data: authorArticles };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/articles/author/${author}`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.getByAuthor(${author}):`, error);\r\n      return { data: [] };\r\n    }\r\n  },\r\n\r\n  // Phê duyệt bài viết\r\n  approveArticle: (id) => {\r\n    try {\r\n      console.log(`Approving article ${id}`);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const index = articles.findIndex(a => a.id === parseInt(id));\r\n      \r\n      if (index !== -1) {\r\n        articles[index].status = 'approved';\r\n        localStorage.setItem('articles', JSON.stringify(articles));\r\n        console.log(`Article ${id} approved successfully`);\r\n        \r\n        return { data: articles[index] };\r\n      } else {\r\n        console.error(`Article with id ${id} not found for approval`);\r\n        throw new Error(`Article with id ${id} not found`);\r\n      }\r\n      // When backend is ready:\r\n      // return axios.put(`${API_URL}/articles/${id}/approve`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.approveArticle(${id}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Từ chối bài viết\r\n  rejectArticle: (id) => {\r\n    try {\r\n      console.log(`Rejecting article ${id}`);\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const index = articles.findIndex(a => a.id === parseInt(id));\r\n      \r\n      if (index !== -1) {\r\n        articles[index].status = 'rejected';\r\n        localStorage.setItem('articles', JSON.stringify(articles));\r\n        console.log(`Article ${id} rejected successfully`);\r\n        \r\n        return { data: articles[index] };\r\n      } else {\r\n        console.error(`Article with id ${id} not found for rejection`);\r\n        throw new Error(`Article with id ${id} not found`);\r\n      }\r\n      // When backend is ready:\r\n      // return axios.put(`${API_URL}/articles/${id}/reject`);\r\n    } catch (error) {\r\n      console.error(`Error in articleApi.rejectArticle(${id}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Lấy các bài viết đang chờ phê duyệt\r\n  getPendingArticles: () => {\r\n    try {\r\n      console.log(\"Getting pending articles\");\r\n      \r\n      // Temporary solution\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const pendingArticles = articles.filter(a => a.status === 'pending' || !a.status);\r\n      \r\n      console.log(`Found ${pendingArticles.length} pending articles`);\r\n      return { data: pendingArticles };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/articles/pending`);\r\n    } catch (error) {\r\n      console.error(\"Error in articleApi.getPendingArticles:\", error);\r\n      return { data: [] };\r\n    }\r\n  }\r\n};\r\n\r\n// Comment API\r\nexport const commentApi = {\r\n  getAll: () => {\r\n    try {\r\n      console.log(\"Getting all comments\");\r\n      \r\n      // Temporary solution\r\n      const comments = [];\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\r\n      \r\n      Object.keys(commentsObj).forEach(articleId => {\r\n        const article = articles.find(a => a.id === parseInt(articleId));\r\n        if (article) {\r\n          commentsObj[articleId].forEach(comment => {\r\n            comments.push({\r\n              ...comment,\r\n              articleTitle: article.title,\r\n              article_id: parseInt(articleId)\r\n            });\r\n          });\r\n        }\r\n      });\r\n      \r\n      console.log(`Found ${comments.length} total comments`);\r\n      return { data: comments };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/comments`);\r\n    } catch (error) {\r\n      console.error(\"Error in commentApi.getAll:\", error);\r\n      return { data: [] };\r\n    }\r\n  },\r\n  \r\n  getByArticleId: (articleId) => {\r\n    try {\r\n      console.log(`Getting comments for article ${articleId}`);\r\n      \r\n      // Temporary solution\r\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\r\n      const articleComments = commentsObj[articleId] || [];\r\n      \r\n      console.log(`Found ${articleComments.length} comments for article ${articleId}`);\r\n      return { data: articleComments };\r\n      // When backend is ready:\r\n      // return axios.get(`${API_URL}/comments/${articleId}`);\r\n    } catch (error) {\r\n      console.error(`Error in commentApi.getByArticleId(${articleId}):`, error);\r\n      return { data: [] };\r\n    }\r\n  },\r\n  \r\n  add: (articleId, data) => {\r\n    try {\r\n      console.log(`Adding comment to article ${articleId}:`, data);\r\n      \r\n      // Temporary solution\r\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\r\n      const newComment = {\r\n        id: Date.now(),\r\n        ...data,\r\n        date: new Date().toISOString()\r\n      };\r\n      \r\n      if (!commentsObj[articleId]) {\r\n        commentsObj[articleId] = [];\r\n      }\r\n      \r\n      commentsObj[articleId].unshift(newComment);\r\n      localStorage.setItem('comments', JSON.stringify(commentsObj));\r\n      \r\n      // Update article comment count\r\n      const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n      const articleIndex = articles.findIndex(a => a.id === parseInt(articleId));\r\n      \r\n      if (articleIndex !== -1) {\r\n        articles[articleIndex].commentCount = (articles[articleIndex].commentCount || 0) + 1;\r\n        localStorage.setItem('articles', JSON.stringify(articles));\r\n      }\r\n      \r\n      console.log(`Comment added to article ${articleId} successfully`);\r\n      return { data: newComment };\r\n      // When backend is ready:\r\n      // return axios.post(`${API_URL}/comments/${articleId}`, data);\r\n    } catch (error) {\r\n      console.error(`Error in commentApi.add(${articleId}):`, error);\r\n      throw error;\r\n    }\r\n  },\r\n  \r\n  delete: (id) => {\r\n    try {\r\n      console.log(`Deleting comment ${id}`);\r\n      \r\n      // Temporary solution\r\n      const commentsObj = JSON.parse(localStorage.getItem('comments')) || {};\r\n      let deleted = false;\r\n      let articleId = null;\r\n      \r\n      Object.keys(commentsObj).forEach(artId => {\r\n        const index = commentsObj[artId].findIndex(c => c.id === parseInt(id));\r\n        if (index !== -1) {\r\n          commentsObj[artId].splice(index, 1);\r\n          deleted = true;\r\n          articleId = artId;\r\n        }\r\n      });\r\n      \r\n      if (deleted) {\r\n        localStorage.setItem('comments', JSON.stringify(commentsObj));\r\n        \r\n        // Update article comment count\r\n        if (articleId) {\r\n          const articles = JSON.parse(localStorage.getItem('articles')) || [];\r\n          const articleIndex = articles.findIndex(a => a.id === parseInt(articleId));\r\n          \r\n          if (articleIndex !== -1) {\r\n            articles[articleIndex].commentCount = Math.max((articles[articleIndex].commentCount || 0) - 1, 0);\r\n            localStorage.setItem('articles', JSON.stringify(articles));\r\n          }\r\n        }\r\n        \r\n        console.log(`Comment ${id} deleted successfully`);\r\n      } else {\r\n        console.warn(`Comment with id ${id} not found for deletion`);\r\n      }\r\n      \r\n      return { data: {} };\r\n      // When backend is ready:\r\n      // return axios.delete(`${API_URL}/comments/${id}`);\r\n    } catch (error) {\r\n      console.error(`Error in commentApi.delete(${id}):`, error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,MAAM,EAAEA,CAAA,KAAM;IACZ,IAAI;MACF;MACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnEC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEN,QAAQ,CAACO,MAAM,CAAC;MACnD,OAAO;QAAEC,IAAI,EAAER;MAAS,CAAC;MACzB;MACA;IACF,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF,CAAC;EAEDE,OAAO,EAAGC,EAAE,IAAK;IACf,IAAI;MACF;MACA,MAAMX,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMQ,OAAO,GAAGZ,QAAQ,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MACzD,IAAI,CAACC,OAAO,EAAE;QACZP,OAAO,CAACW,IAAI,CAAC,mBAAmBL,EAAE,YAAY,CAAC;MACjD;MACA,OAAO;QAAEH,IAAI,EAAEI;MAAQ,CAAC;MACxB;MACA;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,+BAA+BE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC3D,OAAO;QAAED,IAAI,EAAE;MAAK,CAAC;IACvB;EACF,CAAC;EAEDS,UAAU,EAAGN,EAAE,IAAK;IAClB,IAAI;MACF;MACA,MAAMX,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE;MACA,MAAMc,gBAAgB,GAAGlB,QAAQ,CAACmB,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACM,MAAM,KAAK,UAAU,CAAC;MACtE;MACA,MAAMC,eAAe,GAAGH,gBAAgB,CACrCC,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC,CAClCW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MACd,OAAO;QAAEd,IAAI,EAAEa;MAAgB,CAAC;MAChC;MACA;IACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,kCAAkCE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC9D,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF,CAAC;EAEDe,MAAM,EAAGf,IAAI,IAAK;IAChB,IAAI;MACFH,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEE,IAAI,CAAC;;MAEhD;MACA,MAAMR,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;;MAEnE;MACA,MAAMoB,KAAK,GAAGxB,QAAQ,CAACO,MAAM,GAAG,CAAC,GAC7BkB,IAAI,CAACC,GAAG,CAAC,GAAG1B,QAAQ,CAAC2B,GAAG,CAACb,CAAC,IAAI,OAAOA,CAAC,CAACH,EAAE,KAAK,QAAQ,GAAGG,CAAC,CAACH,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GACvE,CAAC;;MAEL;MACA,IAAIiB,SAAS,GAAGpB,IAAI,CAACqB,KAAK;MAC1B,IAAI,CAACD,SAAS,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;QACjC;QACA,IAAI,CAACF,SAAS,CAACE,UAAU,CAAC,GAAG,CAAC,EAAE;UAC9BF,SAAS,GAAG,GAAG,GAAGA,SAAS;QAC7B;MACF;MAEA,MAAMG,UAAU,GAAG;QACjB,GAAGvB,IAAI;QACPG,EAAE,EAAEa,KAAK;QACTK,KAAK,EAAED,SAAS;QAChBI,IAAI,EAAExB,IAAI,CAACwB,IAAI,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QAC3CC,aAAa,EAAE,CAAC;QAChBC,YAAY,EAAE,CAAC;QACfC,YAAY,EAAE;MAChB,CAAC;MAEDrC,QAAQ,CAACsC,IAAI,CAACP,UAAU,CAAC;MACzB5B,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;MAE1DK,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEyB,UAAU,CAAC;;MAExD;MACA,MAAMU,QAAQ,GAAGxC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACnEqC,QAAQ,CAACjB,KAAK,CAAC,GAAG,EAAE;MACpBrB,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACC,QAAQ,CAAC,CAAC;MAE1D,OAAO;QAAEjC,IAAI,EAAEuB;MAAW,CAAC;MAC3B;MACA;IACF,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAEDiC,MAAM,EAAEA,CAAC/B,EAAE,EAAEH,IAAI,KAAK;IACpB,IAAI;MACFH,OAAO,CAACC,GAAG,CAAC,oBAAoBK,EAAE,aAAa,EAAEH,IAAI,CAAC;;MAEtD;MACA,MAAMR,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMuC,KAAK,GAAG3C,QAAQ,CAAC4C,SAAS,CAAC9B,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MAE5D,IAAIgC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB;QACA,IAAIf,SAAS,GAAGpB,IAAI,CAACqB,KAAK;QAC1B,IAAI,CAACD,SAAS,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;UACjC;UACA,IAAI,CAACF,SAAS,CAACE,UAAU,CAAC,GAAG,CAAC,EAAE;YAC9BF,SAAS,GAAG,GAAG,GAAGA,SAAS;UAC7B;QACF;;QAEA;QACA5B,QAAQ,CAAC2C,KAAK,CAAC,GAAG;UAChB,GAAG3C,QAAQ,CAAC2C,KAAK,CAAC;UAClB,GAAGnC,IAAI;UACPG,EAAE,EAAEI,QAAQ,CAACJ,EAAE,CAAC;UAChBkB,KAAK,EAAED;QACT,CAAC;QAEDzB,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;QAC1DK,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEN,QAAQ,CAAC2C,KAAK,CAAC,CAAC;QAE7D,OAAO;UAAEnC,IAAI,EAAER,QAAQ,CAAC2C,KAAK;QAAE,CAAC;MAClC,CAAC,MAAM;QACLtC,OAAO,CAACI,KAAK,CAAC,mBAAmBE,EAAE,uBAAuB,CAAC;QAC3D,MAAM,IAAIkC,KAAK,CAAC,mBAAmBlC,EAAE,YAAY,CAAC;MACpD;MACA;MACA;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8BE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAEDqC,MAAM,EAAGnC,EAAE,IAAK;IACd,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,oBAAoBK,EAAE,EAAE,CAAC;;MAErC;MACA,MAAMX,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAM2C,gBAAgB,GAAG/C,QAAQ,CAACmB,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MAEpE,IAAIoC,gBAAgB,CAACxC,MAAM,KAAKP,QAAQ,CAACO,MAAM,EAAE;QAC/CF,OAAO,CAACW,IAAI,CAAC,mBAAmBL,EAAE,yBAAyB,CAAC;MAC9D,CAAC,MAAM;QACLR,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACO,gBAAgB,CAAC,CAAC;;QAElE;QACA,MAAMN,QAAQ,GAAGxC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;QACnE,OAAOqC,QAAQ,CAAC9B,EAAE,CAAC;QACnBR,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACC,QAAQ,CAAC,CAAC;QAE1DpC,OAAO,CAACC,GAAG,CAAC,WAAWK,EAAE,wCAAwC,CAAC;MACpE;MAEA,OAAO;QAAEH,IAAI,EAAE,CAAC;MAAE,CAAC;MACnB;MACA;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8BE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF,CAAC;EAEDuC,SAAS,EAAEA,CAACrC,EAAE,EAAEH,IAAI,KAAK;IACvB,IAAI;MACFH,OAAO,CAACC,GAAG,CAAC,4BAA4BK,EAAE,GAAG,EAAEH,IAAI,CAAC;;MAEpD;MACA,MAAMR,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMQ,OAAO,GAAGZ,QAAQ,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MAEzD,IAAIC,OAAO,EAAE;QACX,MAAMwB,YAAY,GAAG,CAACxB,OAAO,CAACwB,YAAY,IAAI,CAAC,IAAI,CAAC;QACpD,MAAMa,UAAU,GAAG,CAACrC,OAAO,CAACuB,aAAa,IAAI,CAAC,KAAKvB,OAAO,CAACwB,YAAY,IAAI,CAAC,CAAC,GAAG5B,IAAI,CAAC0C,MAAM;QAC3F,MAAMC,gBAAgB,GAAGF,UAAU,GAAGb,YAAY;QAElDxB,OAAO,CAACuB,aAAa,GAAGgB,gBAAgB;QACxCvC,OAAO,CAACwB,YAAY,GAAGA,YAAY;QAEnCjC,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;QAC1DK,OAAO,CAACC,GAAG,CAAC,2BAA2BK,EAAE,kBAAkBwC,gBAAgB,EAAE,CAAC;QAE9E,OAAO;UACL3C,IAAI,EAAE;YACJ2B,aAAa,EAAEgB,gBAAgB;YAC/Bf;UACF;QACF,CAAC;MACH,CAAC,MAAM;QACL/B,OAAO,CAACI,KAAK,CAAC,mBAAmBE,EAAE,uBAAuB,CAAC;QAC3D,MAAM,IAAIkC,KAAK,CAAC,mBAAmBlC,EAAE,YAAY,CAAC;MACpD;MACA;MACA;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,iCAAiCE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC7D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA2C,WAAW,EAAGC,MAAM,IAAK;IACvB,IAAI;MACFhD,OAAO,CAACC,GAAG,CAAC,+BAA+B+C,MAAM,EAAE,CAAC;;MAEpD;MACA,MAAMrD,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMkD,cAAc,GAAGtD,QAAQ,CAACmB,MAAM,CAACP,OAAO,IAAIA,OAAO,CAACyC,MAAM,KAAKA,MAAM,CAAC;MAE5EhD,OAAO,CAACC,GAAG,CAAC,SAASgD,cAAc,CAAC/C,MAAM,gBAAgB8C,MAAM,EAAE,CAAC;MACnE,OAAO;QAAE7C,IAAI,EAAE8C;MAAe,CAAC;MAC/B;MACA;IACF,CAAC,CAAC,OAAO7C,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,mCAAmC4C,MAAM,IAAI,EAAE5C,KAAK,CAAC;MACnE,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF,CAAC;EAED;EACA+C,cAAc,EAAG5C,EAAE,IAAK;IACtB,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,qBAAqBK,EAAE,EAAE,CAAC;;MAEtC;MACA,MAAMX,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMuC,KAAK,GAAG3C,QAAQ,CAAC4C,SAAS,CAAC9B,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MAE5D,IAAIgC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB3C,QAAQ,CAAC2C,KAAK,CAAC,CAACvB,MAAM,GAAG,UAAU;QACnCjB,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;QAC1DK,OAAO,CAACC,GAAG,CAAC,WAAWK,EAAE,wBAAwB,CAAC;QAElD,OAAO;UAAEH,IAAI,EAAER,QAAQ,CAAC2C,KAAK;QAAE,CAAC;MAClC,CAAC,MAAM;QACLtC,OAAO,CAACI,KAAK,CAAC,mBAAmBE,EAAE,yBAAyB,CAAC;QAC7D,MAAM,IAAIkC,KAAK,CAAC,mBAAmBlC,EAAE,YAAY,CAAC;MACpD;MACA;MACA;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sCAAsCE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA+C,aAAa,EAAG7C,EAAE,IAAK;IACrB,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,qBAAqBK,EAAE,EAAE,CAAC;;MAEtC;MACA,MAAMX,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMuC,KAAK,GAAG3C,QAAQ,CAAC4C,SAAS,CAAC9B,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;MAE5D,IAAIgC,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB3C,QAAQ,CAAC2C,KAAK,CAAC,CAACvB,MAAM,GAAG,UAAU;QACnCjB,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;QAC1DK,OAAO,CAACC,GAAG,CAAC,WAAWK,EAAE,wBAAwB,CAAC;QAElD,OAAO;UAAEH,IAAI,EAAER,QAAQ,CAAC2C,KAAK;QAAE,CAAC;MAClC,CAAC,MAAM;QACLtC,OAAO,CAACI,KAAK,CAAC,mBAAmBE,EAAE,0BAA0B,CAAC;QAC9D,MAAM,IAAIkC,KAAK,CAAC,mBAAmBlC,EAAE,YAAY,CAAC;MACpD;MACA;MACA;IACF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,qCAAqCE,EAAE,IAAI,EAAEF,KAAK,CAAC;MACjE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAgD,kBAAkB,EAAEA,CAAA,KAAM;IACxB,IAAI;MACFpD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACA,MAAMN,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMsD,eAAe,GAAG1D,QAAQ,CAACmB,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACM,MAAM,KAAK,SAAS,IAAI,CAACN,CAAC,CAACM,MAAM,CAAC;MAEjFf,OAAO,CAACC,GAAG,CAAC,SAASoD,eAAe,CAACnD,MAAM,mBAAmB,CAAC;MAC/D,OAAO;QAAEC,IAAI,EAAEkD;MAAgB,CAAC;MAChC;MACA;IACF,CAAC,CAAC,OAAOjD,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmD,UAAU,GAAG;EACxB5D,MAAM,EAAEA,CAAA,KAAM;IACZ,IAAI;MACFM,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;MAEnC;MACA,MAAMmC,QAAQ,GAAG,EAAE;MACnB,MAAMzC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMwD,WAAW,GAAG3D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MAEtEyD,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC,CAACG,OAAO,CAACC,SAAS,IAAI;QAC5C,MAAMpD,OAAO,GAAGZ,QAAQ,CAACa,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACiD,SAAS,CAAC,CAAC;QAChE,IAAIpD,OAAO,EAAE;UACXgD,WAAW,CAACI,SAAS,CAAC,CAACD,OAAO,CAACE,OAAO,IAAI;YACxCxB,QAAQ,CAACH,IAAI,CAAC;cACZ,GAAG2B,OAAO;cACVC,YAAY,EAAEtD,OAAO,CAACuD,KAAK;cAC3BC,UAAU,EAAErD,QAAQ,CAACiD,SAAS;YAChC,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF3D,OAAO,CAACC,GAAG,CAAC,SAASmC,QAAQ,CAAClC,MAAM,iBAAiB,CAAC;MACtD,OAAO;QAAEC,IAAI,EAAEiC;MAAS,CAAC;MACzB;MACA;IACF,CAAC,CAAC,OAAOhC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF,CAAC;EAED6D,cAAc,EAAGL,SAAS,IAAK;IAC7B,IAAI;MACF3D,OAAO,CAACC,GAAG,CAAC,gCAAgC0D,SAAS,EAAE,CAAC;;MAExD;MACA,MAAMJ,WAAW,GAAG3D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACtE,MAAMkE,eAAe,GAAGV,WAAW,CAACI,SAAS,CAAC,IAAI,EAAE;MAEpD3D,OAAO,CAACC,GAAG,CAAC,SAASgE,eAAe,CAAC/D,MAAM,yBAAyByD,SAAS,EAAE,CAAC;MAChF,OAAO;QAAExD,IAAI,EAAE8D;MAAgB,CAAC;MAChC;MACA;IACF,CAAC,CAAC,OAAO7D,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,sCAAsCuD,SAAS,IAAI,EAAEvD,KAAK,CAAC;MACzE,OAAO;QAAED,IAAI,EAAE;MAAG,CAAC;IACrB;EACF,CAAC;EAED+D,GAAG,EAAEA,CAACP,SAAS,EAAExD,IAAI,KAAK;IACxB,IAAI;MACFH,OAAO,CAACC,GAAG,CAAC,6BAA6B0D,SAAS,GAAG,EAAExD,IAAI,CAAC;;MAE5D;MACA,MAAMoD,WAAW,GAAG3D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACtE,MAAMoE,UAAU,GAAG;QACjB7D,EAAE,EAAEsB,IAAI,CAACwC,GAAG,CAAC,CAAC;QACd,GAAGjE,IAAI;QACPwB,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MAC/B,CAAC;MAED,IAAI,CAAC0B,WAAW,CAACI,SAAS,CAAC,EAAE;QAC3BJ,WAAW,CAACI,SAAS,CAAC,GAAG,EAAE;MAC7B;MAEAJ,WAAW,CAACI,SAAS,CAAC,CAACU,OAAO,CAACF,UAAU,CAAC;MAC1CrE,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACoB,WAAW,CAAC,CAAC;;MAE7D;MACA,MAAM5D,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MACnE,MAAMuE,YAAY,GAAG3E,QAAQ,CAAC4C,SAAS,CAAC9B,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACiD,SAAS,CAAC,CAAC;MAE1E,IAAIW,YAAY,KAAK,CAAC,CAAC,EAAE;QACvB3E,QAAQ,CAAC2E,YAAY,CAAC,CAACtC,YAAY,GAAG,CAACrC,QAAQ,CAAC2E,YAAY,CAAC,CAACtC,YAAY,IAAI,CAAC,IAAI,CAAC;QACpFlC,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;MAC5D;MAEAK,OAAO,CAACC,GAAG,CAAC,4BAA4B0D,SAAS,eAAe,CAAC;MACjE,OAAO;QAAExD,IAAI,EAAEgE;MAAW,CAAC;MAC3B;MACA;IACF,CAAC,CAAC,OAAO/D,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,2BAA2BuD,SAAS,IAAI,EAAEvD,KAAK,CAAC;MAC9D,MAAMA,KAAK;IACb;EACF,CAAC;EAEDqC,MAAM,EAAGnC,EAAE,IAAK;IACd,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,oBAAoBK,EAAE,EAAE,CAAC;;MAErC;MACA,MAAMiD,WAAW,GAAG3D,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACtE,IAAIwE,OAAO,GAAG,KAAK;MACnB,IAAIZ,SAAS,GAAG,IAAI;MAEpBH,MAAM,CAACC,IAAI,CAACF,WAAW,CAAC,CAACG,OAAO,CAACc,KAAK,IAAI;QACxC,MAAMlC,KAAK,GAAGiB,WAAW,CAACiB,KAAK,CAAC,CAACjC,SAAS,CAACkC,CAAC,IAAIA,CAAC,CAACnE,EAAE,KAAKI,QAAQ,CAACJ,EAAE,CAAC,CAAC;QACtE,IAAIgC,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBiB,WAAW,CAACiB,KAAK,CAAC,CAACE,MAAM,CAACpC,KAAK,EAAE,CAAC,CAAC;UACnCiC,OAAO,GAAG,IAAI;UACdZ,SAAS,GAAGa,KAAK;QACnB;MACF,CAAC,CAAC;MAEF,IAAID,OAAO,EAAE;QACXzE,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACoB,WAAW,CAAC,CAAC;;QAE7D;QACA,IAAII,SAAS,EAAE;UACb,MAAMhE,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;UACnE,MAAMuE,YAAY,GAAG3E,QAAQ,CAAC4C,SAAS,CAAC9B,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKI,QAAQ,CAACiD,SAAS,CAAC,CAAC;UAE1E,IAAIW,YAAY,KAAK,CAAC,CAAC,EAAE;YACvB3E,QAAQ,CAAC2E,YAAY,CAAC,CAACtC,YAAY,GAAGZ,IAAI,CAACC,GAAG,CAAC,CAAC1B,QAAQ,CAAC2E,YAAY,CAAC,CAACtC,YAAY,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACjGlC,YAAY,CAACoC,OAAO,CAAC,UAAU,EAAEtC,IAAI,CAACuC,SAAS,CAACxC,QAAQ,CAAC,CAAC;UAC5D;QACF;QAEAK,OAAO,CAACC,GAAG,CAAC,WAAWK,EAAE,uBAAuB,CAAC;MACnD,CAAC,MAAM;QACLN,OAAO,CAACW,IAAI,CAAC,mBAAmBL,EAAE,yBAAyB,CAAC;MAC9D;MAEA,OAAO;QAAEH,IAAI,EAAE,CAAC;MAAE,CAAC;MACnB;MACA;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,8BAA8BE,EAAE,IAAI,EAAEF,KAAK,CAAC;MAC1D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}